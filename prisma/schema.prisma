generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String?
  image         String?
  phone         String?
  role          String    @default("SENDER")
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  sentRequests     DeliveryRequest[] @relation("SenderRequests")
  receivedRequests DeliveryRequest[] @relation("TravelerRequests")
  travels          Travel[]
  accounts         Account[]
  sessions         Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Travel {
  id            String    @id @default(cuid())
  userId        String
  departure     String
  arrival       String
  departureTime DateTime
  arrivalTime   DateTime
  price         Float
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user     User              @relation(fields: [userId], references: [id])
  requests DeliveryRequest[]
}

model DeliveryRequest {
  id         String   @id @default(cuid())
  senderId   String
  travelerId String
  travelId   String
  status     String   @default("PENDING")
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User    @relation("SenderRequests", fields: [senderId], references: [id])
  traveler User    @relation("TravelerRequests", fields: [travelerId], references: [id])
  travel   Travel  @relation(fields: [travelId], references: [id])
}